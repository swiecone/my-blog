<!-- Page Header -->
    <!-- Set your background image for this header on the line below. -->
   <!-- Page Header -->
    <!-- Set your background image for this header on the line below. -->
    <header class="intro-header" style="background-image: url('img/heavydoc-bg.jpg')">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                    <div class="post-heading">
                        <h1> Heavy documentation Brings Miscommunication </h1>
                        <h2 class="subheading">
                            
                        </h2>
                        <span class="meta">Posted by <a href="about.html">Alex Swiec</a> on October 20, 2015</span>
                    </div>
                </div>
            </div>
        </div>
    </header>


    <!-- Post Content -->
    <article>
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
           

&nbsp;

Putting documentation over any other way of communication, especially when you are working in software development, is risky.

Many people think contrary, and object that not capturing requirements before starting development leads to chaos, but the issue with this posture is that it assumes that we know all the answers, when in reality in Software Development this is rarely the case.

Here are the 10 things that bother me about heavy documentation using waterfall methodologies rather than agile methodologies combined with insightful conversations.
<ol>
    <li><span style="text-decoration: underline;">Too many assumptions are made during documentation:</span> The issue with heavy documentation and planning of a software project is that everybody makes too many assumptions that WE ASSUME ARE RIGHT.  Assumptions come in all kind of  sizes and forms.  Assumptions like assuming the customer will buy (one of the biggest and most dangerous assumptions!), assumptions about the correct user interface, architecture assumptions, and customer funnelling assumptions.  And the problem with all the assumptions is that even if they are explicitly presented, there is a very high chance that they are forgotten once we are in the middle of the documentation process.     We all make assumptions; the problem with documentation over conversation is that rarely are assumptions reviewed.  And if reviewed, it would only be at the beginning of the project in documentation phase.</li><br>
    <li><span style="text-decoration: underline;">Documentation only uses one form of communication:</span>  Documentation only uses written documentation.  This means that it is really important that wording and diagrams are really clear.  The problem is that each person has different interpretations of the documentation, which means that what the author wanted to state in the document may be misinterpreted.   Also, documentation also leaves out of the picture the facial expression of people when reading the document and the healthy conversations around the purpose of the product and if the different features defined in it are actually aligned with the purpose of the product.</li><br>
    <li><span style="text-decoration: underline;">Feedback loop related with the product is slow:</span> Usually documentation is put together and then it’s distributed.  The stakeholders are given some time to review the document, and then they need to come back with comments.  After this cycle is done, the amendments to the documentation are inputted into the document.  The problem with this form of working is that the feedback loop is slow, and again, this is only done through written communication.</li><br>
    <li><span style="text-decoration: underline;">Difficult to change the course of the project:</span>  Once all documentation and requirements are covered, the assumption is that the project is good to go. Everything is clear and perfect.  The problem with this approach is that a change of course in the form of change request is seen as an exception in the project.  If there is a need for this to happen, then a Change Request needs to be created, and guess what? Yes, it needs to be documented, reviewed and approved once again by all stakeholders.</li><br>
    <li><span style="text-decoration: underline;">It’s boring</span>: There is no way around it.  Documentation is usually boarding as hell.   Reading pages and pages of documentation is a tedious task.  The problem with this boringness of documentation is that usually stakeholders can miss details that are important for the project.  And boring documentation will quite surely bring boring products to the market.</li><br>
    <li><span style="text-decoration: underline;">Defined borders between skills:</span>  Usually documentation goes like this.  The product manager with the business analyst writes the BRD.  The project manager creates a project.  The developers develop against the requirements.  The testers test against the requirements.  If there is a bug, everything goes back to the developers.   What if a tester has a brilliant idea for the product?  Well, 99% of the cases the great idea is not captured, because departments usually do not communicate.</li><br>
    <li><span style="text-decoration: underline;">No chance to see if we are horribly wrong:</span> the problem with having products fully documented before starting development is that there is no chance to test if the proposal and assumptions are right.  We write all the requirements, we develop and test everything, and after the long succession of events, we finally launch, and the risk is that at the end of it all nobody really cares about our product.</li><br>
    <li><span style="text-decoration: underline;">Estimations are always on the higher range of the scale: </span> People need to estimate based on the requirements, and the chances are really high that people push estimations up just in case they run out of time when the project starts.   This bring high costs to the project</li><br>
    <li><span style="text-decoration: underline;">Bootstrapping is not an option:</span>  Bootstrapping is the art of getting things done quicker and using fewer resources. When you capture all requirements upfront, there is little thinking exercise related to getting the product faster to market and how to challenge or test some of the assumptions made.  The general assumption is that all requirements are needed.</li><br>
    <li><span style="text-decoration: underline;">If a new opportunity comes along it’s too difficult to let go:</span>  If some new opportunity comes along (and they always do), it is a very hard call to stop all developments and change course.  The problem is that all the previous work done would have no value because the product is still not launched.    Usually what happens is that, unless the opportunity is clearly a BIG opportunity, the project moves forward until completion.</li><br><br>
</ol>
In some cases, there is no way around this, and you need to document.  My suggestion would be to try to make the project in phases, and that those phases can go live, and there is an opportunity to go through the waterfall process fast and there is able to amend course if needed.

                </div>
            </div>
        </div>
    </article>

    <hr>
